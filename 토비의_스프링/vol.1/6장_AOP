# 6.1 트랜잭션 코드의 분리

## 6.1.2 DI를 이용한 클래스의 분리

- 인터페이스를 이용해 구현 클래스를 클라이언트에 노출하지 않고 DI 적용 이유

    구현 클래스를 바꿔가면서 사용하기 위해

    ex) 테스트, 운영 중에 따라 클래스 다르게 적용

Service 인터페이스를 비즈니스 로직을 담은 Impl 클래스와 트랜잭션 처리를 담은 Tx 클래스로 구분하여 구현

의존관계: Client → ServiceTx → ServiceImpl

### 트랜잭션 경계설정 코드 분리의 장점

- 비즈니스와 트랜잭션 관심사 구분
- 비즈니스 로직에 대한 테스트를 쉽게 만들 수 있음
